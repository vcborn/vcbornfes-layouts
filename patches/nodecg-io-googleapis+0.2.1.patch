diff --git a/node_modules/nodecg-io-googleapis/extension/index.d.ts b/node_modules/nodecg-io-googleapis/extension/index.d.ts
index a6a5c55..02d9899 100644
--- a/node_modules/nodecg-io-googleapis/extension/index.d.ts
+++ b/node_modules/nodecg-io-googleapis/extension/index.d.ts
@@ -1,3 +1,3 @@
-import { GoogleApis } from "googleapis";
-export declare type GoogleApisServiceClient = GoogleApis;
+import { LiveChat } from "youtube-chat"
+export declare type GoogleApisServiceClient = LiveChat;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/nodecg-io-googleapis/extension/index.js b/node_modules/nodecg-io-googleapis/extension/index.js
index 161c919..394739f 100644
--- a/node_modules/nodecg-io-googleapis/extension/index.js
+++ b/node_modules/nodecg-io-googleapis/extension/index.js
@@ -1,69 +1,25 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
 const nodecg_io_core_1 = require("nodecg-io-core");
-const googleapis_1 = require("googleapis");
-const express = (0, tslib_1.__importStar)(require("express"));
-const opn = require("open");
+const { LiveChat } = require("youtube-chat");
 module.exports = (nodecg) => {
-    new GoogleApisService(nodecg, "googleapis", __dirname, "../googleapis-schema.json").register();
+	new GoogleApisService(
+		nodecg,
+		"googleapis",
+		__dirname,
+		"../googleapis-schema.json"
+	).register();
 };
 class GoogleApisService extends nodecg_io_core_1.ServiceBundle {
-    async validateConfig(_config) {
-        return (0, nodecg_io_core_1.emptySuccess)();
-    }
-    async createClient(config, logger) {
-        const auth = new googleapis_1.google.auth.OAuth2({
-            clientId: config.clientID,
-            clientSecret: config.clientSecret,
-            redirectUri: `${config.httpsRedirect ? "https" : "http"}://${this.nodecg.config.baseURL}/nodecg-io-googleapis/oauth2callback`,
-        });
-        await this.refreshTokens(config, auth, logger);
-        const client = new googleapis_1.GoogleApis({ auth });
-        return (0, nodecg_io_core_1.success)(client);
-    }
-    stopClient(_client) {
-        return;
-    }
-    async initialAuth(config, auth) {
-        const authURL = auth.generateAuthUrl({
-            access_type: "offline",
-            prompt: "consent",
-            scope: config.scopes,
-        });
-        return new Promise((resolve, reject) => {
-            const router = express.Router();
-            router.get("/nodecg-io-googleapis/oauth2callback", async (req, res) => {
-                try {
-                    const response = `<html><head><script>window.close();</script></head><body>Google Api connection successful! You may close this window now.</body></html>`;
-                    res.send(response);
-                    const { tokens } = await auth.getToken(req.query.code);
-                    resolve(tokens);
-                }
-                catch (e) {
-                    reject((0, nodecg_io_core_1.error)(e));
-                }
-            });
-            this.nodecg.mount(router);
-            opn(authURL, { wait: false }).then((cp) => cp.unref());
-        });
-    }
-    async refreshTokens(config, auth, logger) {
-        if (config.refreshToken) {
-            logger.info("Re-using saved refresh token.");
-            auth.setCredentials({ refresh_token: config.refreshToken });
-        }
-        else {
-            logger.info("No refresh token found. Starting auth flow to get one ...");
-            auth.setCredentials(await this.initialAuth(config, auth));
-            if (auth.credentials.refresh_token) {
-                config.refreshToken = auth.credentials.refresh_token;
-            }
-        }
-        auth.on("tokens", (tokens) => {
-            if (tokens.refresh_token)
-                config.refreshToken = tokens.refresh_token;
-        });
-    }
+	async validateConfig(_config) {
+		return (0, nodecg_io_core_1.emptySuccess)();
+	}
+	async createClient(config, logger) {
+		const client = new LiveChat({ liveId: config.liveID });
+		return (0, nodecg_io_core_1.success)(client);
+	}
+	stopClient(_client) {
+		// You are not really able to stop the client ...
+	}
 }
 //# sourceMappingURL=index.js.map
diff --git a/node_modules/nodecg-io-googleapis/googleapis-schema.json b/node_modules/nodecg-io-googleapis/googleapis-schema.json
index 29210c7..4807e4c 100644
--- a/node_modules/nodecg-io-googleapis/googleapis-schema.json
+++ b/node_modules/nodecg-io-googleapis/googleapis-schema.json
@@ -1,28 +1,12 @@
 {
-    "$schema": "http://json-schema.org/draft-07/schema#",
-    "type": "object",
-    "additionalProperties": false,
-    "properties": {
-        "clientID": {
-            "type": "string",
-            "description": "The oauth client id https://console.cloud.google.com/apis/credentials/oauthclient"
-        },
-        "clientSecret": {
-            "type": "string",
-            "description": "The oauth client secret https://console.cloud.google.com/apis/credentials/oauthclient"
-        },
-        "refreshToken": {
-            "type": "string",
-            "description": "Token that allows the client to refresh access tokens. This is set automatically after first login, you don't need to set it."
-        },
-        "scopes": {
-            "type": "array",
-            "description": "Scope URLs for all used services."
-        },
-        "httpsRedirect": {
-            "type": "boolean",
-            "description": "Should the OAuth redirect URL use the https protocol"
-        }
-    },
-    "required": ["clientID", "clientSecret"]
+	"$schema": "http://json-schema.org/draft-07/schema#",
+	"type": "object",
+	"additionalProperties": false,
+	"properties": {
+		"liveID": {
+			"type": "string",
+			"description": "Youtube Live ID"
+		}
+	},
+	"required": ["liveID"]
 }
