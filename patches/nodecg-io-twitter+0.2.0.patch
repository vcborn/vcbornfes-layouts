diff --git a/node_modules/nodecg-io-twitter/extension/index.d.ts b/node_modules/nodecg-io-twitter/extension/index.d.ts
index 1a4e8b6..7f7574d 100644
--- a/node_modules/nodecg-io-twitter/extension/index.d.ts
+++ b/node_modules/nodecg-io-twitter/extension/index.d.ts
@@ -1,3 +1,3 @@
-import Twitter = require("twitter");
-export declare type TwitterServiceClient = Twitter;
+import { TwitterApi } from "twitter-api-v2";
+export declare type TwitterServiceClient = TwitterApi;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/nodecg-io-twitter/extension/index.js b/node_modules/nodecg-io-twitter/extension/index.js
index 9537f75..5aaa89b 100644
--- a/node_modules/nodecg-io-twitter/extension/index.js
+++ b/node_modules/nodecg-io-twitter/extension/index.js
@@ -1,36 +1,31 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const nodecg_io_core_1 = require("nodecg-io-core");
-const Twitter = require("twitter");
+const { TwitterApi } = require("twitter-api-v2");
 module.exports = (nodecg) => {
-    new TwitterService(nodecg, "twitter", __dirname, "../twitter-schema.json").register();
+	new TwitterService(
+		nodecg,
+		"twitter",
+		__dirname,
+		"../twitter-schema.json"
+	).register();
 };
 class TwitterService extends nodecg_io_core_1.ServiceBundle {
-    async validateConfig(config) {
-        // Connect to twitter
-        const client = new Twitter({
-            consumer_key: config.oauthConsumerKey,
-            consumer_secret: config.oauthConsumerSecret,
-            access_token_key: config.oauthToken,
-            access_token_secret: config.oauthTokenSecret, // eslint-disable-line camelcase
-        });
-        // Validate credentials
-        await client.get("account/verify_credentials", {});
-        return (0, nodecg_io_core_1.emptySuccess)();
-    }
-    async createClient(config, logger) {
-        logger.info("Connecting to twitter...");
-        const client = new Twitter({
-            consumer_key: config.oauthConsumerKey,
-            consumer_secret: config.oauthConsumerSecret,
-            access_token_key: config.oauthToken,
-            access_token_secret: config.oauthTokenSecret, // eslint-disable-line camelcase
-        });
-        logger.info("Successfully connected to twitter.");
-        return (0, nodecg_io_core_1.success)(client);
-    }
-    stopClient(_client) {
-        // You are not really able to stop the client ...
-    }
+	async validateConfig(config) {
+		// Connect to twitter
+		const client = new TwitterApi(config.bearerToken);
+		// Validate credentials
+		await client;
+		return (0, nodecg_io_core_1.emptySuccess)();
+	}
+	async createClient(config, logger) {
+		logger.info("Connecting to twitter...");
+		const client = new TwitterApi(config.bearerToken);
+		logger.info("Successfully connected to twitter.");
+		return (0, nodecg_io_core_1.success)(client);
+	}
+	stopClient(_client) {
+		// You are not really able to stop the client ...
+	}
 }
 //# sourceMappingURL=index.js.map
